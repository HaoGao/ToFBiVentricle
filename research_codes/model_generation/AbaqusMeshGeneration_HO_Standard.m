%% now we will regenerate abaqus file and ready for simulation
clear all;
close all;
clc;

% LVWM_config;
LVWM_config;

%%now need to choose phase to segment
list_phase = {'early_diastole', 'end_diastole', 'end_systole'};
[idx_phase, tf] = listdlg('ListString', list_phase);
cd(resultDir);
if ~exist(list_phase{idx_phase},'dir')
    mkdir(list_phase{idx_phase});
    cd(list_phase{idx_phase});
    phase_resultDir = pwd();    
else
    cd(list_phase{idx_phase});
    phase_resultDir = pwd();
end
cd(workingDir);
phase_selected = list_phase{idx_phase};

cd(phase_resultDir);
cd(solidworksDir);
solidworksDir = pwd();
cd(gmeshDir);
gmeshDir = pwd();
cd(workingDir);


cd(phase_resultDir);
cd(abaqusSimulationDir);
abaqusSimulationDir = pwd();
cd(workingDir);

%%% now the fibre files are saved in gmeshDir, including the mesh file 
%%% the output will be in abaqusSimulationDir
cd(gmeshDir);
load abaqusInput;
fibreDir = load('fibreDir.txt');
sheetDir = load('sheetDir.txt');
load LV_RV_assignment;
cd(workingDir);

%%% first we will output the fibre files which are seems easier
cd(abaqusSimulationDir);
fid_fibre = fopen('fibTotal.inp', 'w');
cd(workingDir);
fprintf(fid_fibre, '*DISTRIBUTION, NAME=dist1, LOCATION=element, TABLE=Fiberdir\n');
fprintf(fid_fibre, ' , 1.0,0.0,0.0,0.0,1.0,0.0\n');
for i = 1 : length(fibreDir)
   fprintf(fid_fibre, '%d, %f, %f, %f, %f, %f, %f,\n', i, fibreDir(i,2), fibreDir(i,3),fibreDir(i,4), ...
                                                          sheetDir(i,2), sheetDir(i,3),sheetDir(i,4)); 
end
fclose(fid_fibre);

%%% now we will output the mesh file including node set and surface set
cd(abaqusSimulationDir);
fid_mesh = fopen('BiVenMeshRVLV_SO.inp', 'w');
cd(workingDir);
fprintf(fid_mesh, '**  ***********************************\n');
fprintf(fid_mesh, '*Heading\n');
fprintf(fid_mesh, '** Job name: Job-1 Model name: BiVenMesh\n');
fprintf(fid_mesh, '** Generated by: Hao Gao, Univeristy of Glasgow on %s\n', date());
fprintf(fid_mesh, '*Preprint, echo=NO, model=NO, history=NO, contact=NO\n');
fprintf(fid_mesh, '**\n');
fprintf(fid_mesh, '** PARTS\n');
fprintf(fid_mesh, '**\n');

fprintf(fid_mesh, '*Part, name=PART-1\n');
fprintf(fid_mesh, '*Node\n');
for i = 1 : size(abaqusInput.nodes, 1)
   fprintf(fid_mesh, '\t%d, \t%f, \t%f, \t%f\n', i, abaqusInput.nodes(i,2), ...
                       abaqusInput.nodes(i,3), abaqusInput.nodes(i,4)); 
end
%%output the elements
fprintf(fid_mesh, '*Element, type=C3D4H\n'); %% this is for standard solver
for i = 1 : size(abaqusInput.elems,1)
   fprintf(fid_mesh, '\t%d, \t%d, \t%d, \t%d, \t%d\n',abaqusInput.elems(i,1),...
       abaqusInput.elems(i,2), abaqusInput.elems(i,3), abaqusInput.elems(i,4), ...
       abaqusInput.elems(i,5));     
end
fprintf(fid_mesh,'*Nset, nset=ALL, generate\n');
fprintf(fid_mesh, '\t1,\t%d,\t 1\n',size(abaqusInput.nodes,1) );
fprintf(fid_mesh, '*Elset, elset=SOLID_BODY, generate\n');
fprintf(fid_mesh, '\t1,\t%d,\t 1\n',size(abaqusInput.elems,1) );

%%output the node set
nodeSets = abaqusInput.nodeSets;
for i = 1 : size(nodeSets,1)
    if strcmp( nodeSets(i).str_node_set, 'NODE_BASE')
        baseNodes = nodeSets(i).nodelist;  
        fprintf(fid_mesh, '*Nset, nset=NODE_BASE\n');
        writeNodesSets(fid_mesh, baseNodes);
    elseif strcmp( nodeSets(i).str_node_set, 'NODE_LV_ENDO')
        LVEndoNodes = nodeSets(i).nodelist;
        fprintf(fid_mesh, '*Nset, nset=NODE_LV_ENDO\n');
        writeNodesSets(fid_mesh, LVEndoNodes);
    elseif strcmp( nodeSets(i).str_node_set, 'NODE_RV_ENDO')  
        RVEndoNodes = nodeSets(i).nodelist;
        fprintf(fid_mesh, '*Nset, nset=NODE_RV_ENDO\n');
        writeNodesSets(fid_mesh, RVEndoNodes);
    elseif strcmp( nodeSets(i).str_node_set, 'NODE_EPI' )
        EPINodes = nodeSets(i).nodelist;
        fprintf(fid_mesh, '*Nset, nset=NODE_EPI\n');
        writeNodesSets(fid_mesh, EPINodes);    
    end
end

%%output the RV and LV sets which are saved in LV_RV_assignment.elem_assign
elem_assign = LV_RV_assignment.elem_assign;
LV_elemIndex = 0;
RV_elemIndex = 0;
for i = 1 : size(elem_assign,1)
   if elem_assign(i,1) == 1
       LV_elemIndex = LV_elemIndex + 1;
       ELEM_LV(LV_elemIndex,1) = i;
   elseif elem_assign(i,1) == 2
       RV_elemIndex = RV_elemIndex + 1;
       ELEM_RV(RV_elemIndex,1) = i;
   end
end
fprintf(fid_mesh, '*Elset, elset=ELEM_LV\n');
writeNodesSets(fid_mesh, ELEM_LV);%% this function can be used for element set also
fprintf(fid_mesh, '*Elset, elset=ELEM_RV\n');
writeNodesSets(fid_mesh, ELEM_RV);


%%% output the surface for defining boundary conditions et al
surfaceSets = abaqusInput.surfaceSets;
for i = 1 : size(surfaceSets)
    if strcmp( surfaceSets(i).surf_name , 'SURF_BASE')
       baseSurf = surfaceSets(i).faceSets; 
       surf_name = surfaceSets(i).surf_name;
       writeFacesSets(fid_mesh, baseSurf, surf_name); 
    end
    
    if strcmp(surfaceSets(i).surf_name, 'SURF_EPI')
        epiSurf = surfaceSets(i).faceSets;
        surf_name = surfaceSets(i).surf_name;
        writeFacesSets(fid_mesh,epiSurf, surf_name);
    end
    
    if strcmp(surfaceSets(i).surf_name, 'SURF_LV_ENDO')
       LVEndoSurf = surfaceSets(i).faceSets;
       surf_name = surfaceSets(i).surf_name;
       writeFacesSets(fid_mesh, LVEndoSurf, surf_name);
    end
    
    if strcmp(surfaceSets(i).surf_name, 'SURF_RV_ENDO')
        RVEndoSurf = surfaceSets(i).faceSets;
        surf_name = surfaceSets(i).surf_name;
        writeFacesSets(fid_mesh, RVEndoSurf, surf_name);
    end 
    
    if strcmp(surfaceSets(i).surf_name, 'SURF_RV_SEPTUM_ENDO')
        RVSeptumEndoSurf = surfaceSets(i).faceSets;
        surf_name = surfaceSets(i).surf_name;
        writeFacesSets(fid_mesh, RVSeptumEndoSurf, surf_name);
    end 
end



fprintf(fid_mesh, '*INCLUDE,INPUT=fibTotal.inp\n');
fprintf(fid_mesh, '** local orthogonal material coordinates axis\n');
fprintf(fid_mesh, '*orientation,name=ori-1,local directions=3\n');
fprintf(fid_mesh, 'dist1\n');
fprintf(fid_mesh, '3,0.0\n');
fprintf(fid_mesh, '1,0,0\n');
fprintf(fid_mesh, '0,1,0\n');
fprintf(fid_mesh, '0,0,1\n');
fprintf(fid_mesh, '*Transform, nset=NODE_BASE, type=C\n');
fprintf(fid_mesh, '0,0,0,0,0,1\n');
fprintf(fid_mesh, '** \n');
%fprintf(fid_mesh, '** Section: Section-1-SOLID_BODY\n');
%fprintf(fid_mesh, '*Solid Section, elset=SOLID_BODY, material=UANISO_HO_MYOCARDIUM,orientation=ori-1\n');
%fprintf(fid_mesh, '1.0\n');
fprintf(fid_mesh, '** Section: Section-1-LV\n');
fprintf(fid_mesh, '*Solid Section, elset=ELEM_LV, material=UANISO_GG_MYOCARDIUM,orientation=ori-1\n');
fprintf(fid_mesh, '1.0\n');
fprintf(fid_mesh, '*Solid Section, elset=ELEM_RV, material=UANISO_GG_MYOCARDIUM_RV,orientation=ori-1\n');
fprintf(fid_mesh, '1.0\n');
fprintf(fid_mesh, '*End Part\n');
fprintf(fid_mesh, '**  \n');
fprintf(fid_mesh, '**\n');
fprintf(fid_mesh, '** ASSEMBLY\n');
fprintf(fid_mesh, '**\n');
fprintf(fid_mesh, '*Assembly, name=Assembly\n');
fprintf(fid_mesh, '**  \n');
fprintf(fid_mesh, '*Instance, name=PART-1_1, part=PART-1\n');
fprintf(fid_mesh, '*End Instance\n');
fprintf(fid_mesh, '**  \n');
fprintf(fid_mesh, '*End Assembly\n');



fclose(fid_mesh);














