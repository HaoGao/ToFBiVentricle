
deformetrica
 src
 core
 model_tools
 attachments
 multi_object_attachment.py
	
	@staticmethod
    def varifold_distance(points, source, target, kernel):

        """
        Returns the current distance between the 3D meshes
        source and target are SurfaceMesh objects
        points are source points (torch tensor)
        """
        device, _ = utilities.get_best_device(kernel.gpu_mode)
        c1, n1, c2, n2 = MultiObjectAttachment.__get_source_and_target_centers_and_normals(points, source, target, device=device)

        # alpha = normales non unitaires
        areaa = torch.norm(n1, 2, 1)
        areab = torch.norm(n2, 2, 1)

        nalpha = n1 / areaa.unsqueeze(1)
        nbeta = n2 / areab.unsqueeze(1)

        def varifold_scalar_product(x, y, areaa, areab, nalpha, nbeta):
            return torch.dot(areaa.view(-1), kernel.convolve((x, nalpha), (y, nbeta), areab.view(-1, 1), mode='varifold').view(-1))

        if target.norm is None:
            target.norm = varifold_scalar_product(c2, c2, areab, areab, nbeta, nbeta)

        return varifold_scalar_product(c1, c1, areaa, areaa, nalpha, nalpha) + target.norm \
               - 2 * varifold_scalar_product(c1, c2, areaa, areab, nalpha, nbeta)





@staticmethod
    def __get_source_and_target_centers_and_normals(points, source, target, device=None):
        if device is None:
            device = points.device

        dtype = str(points.dtype)

        c1, n1 = source.get_centers_and_normals(points,
                                                tensor_scalar_type=utilities.get_torch_scalar_type(dtype=dtype),
                                                tensor_integer_type=utilities.get_torch_integer_type(dtype=dtype),
                                                device=device)
        c2, n2 = target.get_centers_and_normals(tensor_scalar_type=utilities.get_torch_scalar_type(dtype=dtype),
                                                tensor_integer_type=utilities.get_torch_integer_type(dtype=dtype),
                                                device=device)

        assert c1.device == n1.device == c2.device == n2.device, 'all tensors must be on the same device, c1.device=' + str(c1.device) \
                                                                 + ', n1.device=' + str(n1.device)\
                                                                 + ', c2.device=' + str(c2.device)\
                                                                 + ', n2.device=' + str(n2.device)
        return c1, n1, c2, n2



deformetrica/src/support/kernels/torch_kernel.py

def gaussian(r2, s):
    return torch.exp(-r2 / (s * s))



def convolve(self, x, y, p, mode='gaussian'):
        res = None

        if mode in ['gaussian', 'pointcloud']:
            # move tensors with respect to gpu_mode
            x, y, p = (self._move_to_device(t, gpu_mode=self.gpu_mode) for t in [x, y, p])
            assert x.device == y.device == p.device, 'x, y and p must be on the same device'

            sq = self._squared_distances(x, y)
            res = torch.mm(torch.exp(-sq / (self.kernel_width ** 2)), p)
            # res = torch.mm(1.0 / (1 + sq / self.kernel_width ** 2), p)

        elif mode == 'varifold':
            assert isinstance(x, tuple), 'x must be a tuple'
            assert len(x) == 2, 'tuple length must be 2'
            assert isinstance(y, tuple), 'y must be a tuple'
            assert len(y) == 2, 'tuple length must be 2'

            # tuples are immutable, mutability is needed to mode to device
            x = list(x)
            y = list(y)

            # move tensors with respect to gpu_mode
            x[0], x[1], y[0], y[1], p = (self._move_to_device(t, gpu_mode=self.gpu_mode) for t in [x[0], x[1], y[0], y[1], p])
            assert x[0].device == y[0].device == p.device, 'x, y and p must be on the same device'
            assert x[1].device == y[1].device == p.device, 'x, y and p must be on the same device'

            sq = self._squared_distances(x[0], y[0])
            res = torch.mm(gaussian(sq, self.kernel_width) * binet(torch.mm(x[1], torch.t(y[1]))), p)
        else:
            raise RuntimeError('Unknown kernel mode.')

        return res.cpu() if self.gpu_mode is GpuMode.KERNEL else res
		
		normals = torch.cross(b - a, c - a) / 2
		
		
class SurfaceMesh(Landmark):
 a = points[triangles[:, 0]]
 b = points[triangles[:, 1]]
 c = points[triangles[:, 2]]
 centers = (a + b + c) / 3.
 normals = torch.cross(b - a, c - a) / 2
 

		

